schema_version: "0.5.0"

before_install:

  appveyor:
    environment:
      PATH: $<PYTHON_DIR>;$<PYTHON_DIR>\\Scripts;$<PATH>
    commands:
      - python ../addons/appveyor/patch_vs2008.py

  circle:
    environment:
      PATH: /opt/python/$<MANYLINUX_PYTHON>/bin:$<PATH>
      SETUP_CMAKE_ARGS: -DCMAKE_JOB_POOL_COMPILE:STRING=compile -DCMAKE_JOB_POOL_LINK:STRING=link '-DCMAKE_JOB_POOLS:STRING=compile=4;link=3'
    commands:
      - python: |
                import ci, os
                image_name=os.environ["DEFAULT_DOCKCROSS_IMAGE"].split(":")[0].split("/")[1]
                print("image_name [%s]" % image_name)
                manylinux_version=image_name.split("-")[0]
                arch=image_name.split("-")[1]
                manylinux_arch = {"x86": "i686", "x64": "x86_64"}.get(arch, arch)
                print("arch [%s]" % arch)
                print("manylinux_version [%s]" % manylinux_version)
                print("manylinux_arch [%s]" % manylinux_arch)
                # Support using older manylinux images explicitly setting AUDITWHEEL_*  environment variables
                os.environ["AUDITWHEEL_ARCH"] = manylinux_arch
                os.environ["AUDITWHEEL_PLAT"] = manylinux_version + "_" + manylinux_arch
                # CFLAGS
                if arch == "x86":
                    # Required to build cryptography wheel from source for cp37-cp37 when using manylinux-x86
                    os.environ["CFLAGS"] = "-I/usr/local/ssl/include -L/usr/local/ssl/lib"
                # SETUP_CMAKE_ARGS
                if arch in ["x86", "x64"]:
                    os.environ["SETUP_CMAKE_ARGS"] = "-DOPENSSL_ROOT_DIR:PATH=/usr/local/ssl " + os.environ["SETUP_CMAKE_ARGS"]
                ci.driver.Driver.save_env(os.environ)

  travis:
    osx:
      environment:
        PATH: $<HOME>/.pyenv/versions/$<PYTHON_VERSION>/bin:$<PATH>
        SETUP_BDIST_WHEEL_ARGS: --plat-name macosx-$<MACOSX_DEPLOYMENT_TARGET>-x86_64
      commands:
        - python scripts/ssl-check.py
        - python ../addons/travis/install_cmake.py 3.12.0
    linux:
      commands:
        - python: |
                  import os
                  import ci
                  import platform
                  setup_cmake_args = []
                  setup_cmake_args.append("-DSTRIP_EXECUTABLE:FILEPATH=/opt/rh/devtoolset-9/root/usr/" + "/bin/strip")
                  if platform.machine() in {"aarch64", "ppc64le", "s390x"}:
                      # Remove this after addressing https://github.com/dockcross/dockcross/issues/431
                      setup_cmake_args.append("-DOPENSSL_ROOT_DIR:PATH=/tmp/openssl-install")
                  os.environ["SETUP_CMAKE_ARGS"] = " ".join(setup_cmake_args)
                  if platform.machine() in {"ppc64le"}:
                      # the container sees all 16 threads but building with all of them
                      # triggers the OoM killer due to RAM limitations
                      os.environ["SETUP_MAKE_ARGS"] = "-j2"
                  else:
                      os.environ["SETUP_MAKE_ARGS"] = "-j$(nproc)"
                  ci.driver.Driver.save_env(os.environ)

install:
  commands:
    - python -c "import sys; print(sys.version)"
    - python -m pip install --disable-pip-version-check --upgrade pip
    - pip install pytest-virtualenv -f https://github.com/jcfr/pytest-plugins/releases/tag/v1.7.0.dev15 --pre
    - pip install git+https://github.com/jcfr/wheeltools.git@wheeltools-2018-10-28-a2f174d0e
    - pip install -r requirements-dev.txt

before_build:
  commands:
    - flake8

build:
  commands:
    # Source distribution
    - python setup.py --hide-listing sdist
    # Built distribution (wheel)
    - python setup.py --hide-listing bdist_wheel $<SETUP_BDIST_WHEEL_ARGS> -- $<SETUP_CMAKE_ARGS> -- $<SETUP_MAKE_ARGS>
    # Cleanup
    - python: |
              import glob, os
              if os.environ.get("UPLOAD_SDIST", "") == "":
                  sdist=(glob.glob("dist/*.tar.gz") + glob.glob("dist/*.zip"))[0]
                  print("Deleting [%s]" % sdist)
                  os.remove(sdist)
    # Convert to generic platform wheel
    - python: |
              import glob, os, subprocess, sys
              if os.environ.get("UPLOAD_SDIST", "") != "tests-only":  # no need to repair for "tests-only"
                  wheels = glob.glob("dist/*.whl")
                  for wheel in wheels:
                      subprocess.check_call([sys.executable, "scripts/repair_wheel.py", "-w", "dist", wheel])
                      os.remove(wheel)
              wheels = glob.glob("dist/*.whl")
              assert len(wheels) == 1, "There shall be exactly 1 final wheel per build"

test:
  appveyor:
    commands:
      - python setup.py test

  circle:
    commands:
      - |
        if [[ ${AUDITWHEEL_ARCH} == "aarch64" ]]; then
            exit
        fi
        python setup.py test

  travis:
    osx:
      commands:
        - python setup.py test

#after_test:
#  commands:
#    - codecov -X gcov --required --file ./tests/coverage.xml
